--- a/drivers/net/wireless/ath/ath.h
+++ b/drivers/net/wireless/ath/ath.h
@@ -23,6 +23,16 @@
 #include <linux/spinlock.h>
 #include <net/mac80211.h>
 
+/* RegMon */
+#if defined (CPTCFG_ATH5K_DEBUG) || defined (CPTCFG_ATH9K_DEBUGFS)
+#include <linux/timer.h>
+#include <linux/hrtimer.h>
+/* maximum number of 32-bit registers RegMon monitors */
+#define MAX_REG_COUNT 12
+/* maximum size RegMon ringbufer in number of rows */
+#define REG_LOG_ROWS 30000
+#endif /* RegMon */
+
 /*
  * The key cache is used for h/w cipher state and also for
  * tracking station state such as the current tx antenna.
@@ -144,6 +154,14 @@ struct ath_ps_ops {
 	void (*restore)(struct ath_common *common);
 };
 
+#if defined (CPTCFG_ATH5K_DEBUG) || defined (CPTCFG_ATH9K_DEBUGFS)
+/* RegMon hrtimer */
+struct hrtimer_mod {
+	struct hrtimer timer;	/* the hrtime */
+	ktime_t interval;	/* interval to use in hrtimer_forward */
+};
+#endif
+
 struct ath_common {
 	void *ah;
 	void *priv;
@@ -163,6 +181,23 @@ struct ath_common {
 
 	u32 rx_bufsize;
 
+#if defined (CPTCFG_ATH5K_DEBUG) || defined (CPTCFG_ATH9K_DEBUGFS)
+	/* RegMon */
+	s64 *reg_hosttime;
+	u32 reg_interval;
+	u32 reg_hz;
+	u32 reg[MAX_REG_COUNT];
+	u32 *reg_log[MAX_REG_COUNT];
+	int reg_last;
+	int reg_current;
+	int reg_count;
+	int shutdown;
+	spinlock_t reg_lock;
+	struct dentry *debugfs_dir;
+	struct timer_list reg_timer;
+	struct hrtimer_mod hrtm;
+#endif
+
 	u32 keymax;
 	DECLARE_BITMAP(keymap, ATH_KEYMAX);
 	DECLARE_BITMAP(tkip_keymap, ATH_KEYMAX);
--- a/drivers/net/wireless/ath/ath9k/Makefile
+++ b/drivers/net/wireless/ath/ath9k/Makefile
@@ -1,5 +1,6 @@
 ath9k-y +=	beacon.o \
 		gpio.o \
+		ath9k_regmon.o \
 		init.o \
 		main.o \
 		recv.o \
--- /dev/null
+++ b/drivers/net/wireless/ath/ath9k/ath9k_regmon.c
@@ -0,0 +1,156 @@
+#include "ath9k_regmon.h"
+
+/* RegMon reads from userspace */
+ssize_t
+reg_log_read_regmon(struct ath_common *common, char __user *userbuf, size_t count,
+		    loff_t *ppos)
+{
+	char buf[256];
+	size_t len, n, ret;
+	size_t sum = 0;
+	loff_t pos;
+	u8 i;
+
+	spin_lock_bh(&common->reg_lock);
+
+	while (common->reg_last != common->reg_current && count > 0) {
+		spin_unlock_bh(&common->reg_lock);
+
+		/* 1st host time, 2nd delta hosttime, 3dr TSF, 4th delts TSF */
+		len = scnprintf(buf, sizeof(buf), "%.19lld %.8lld %.8x%.8x %.8d",
+				common->reg_hosttime[common->reg_last],
+				common->reg_hosttime[common->reg_last] - common->reg_hosttime[common->reg_last - 1],
+				(unsigned int) common->reg_log[0][common->reg_last],
+				(unsigned int) common->reg_log[1][common->reg_last],
+				(unsigned int) common->reg_log[1][common->reg_last] -
+				 (unsigned int) common->reg_log[1][common->reg_last - 1]);
+
+		/* print register values */
+		for (i = 2; i < MAX_REG_COUNT; i++) {
+			len += scnprintf(buf + len, sizeof(buf) - len,
+					 " %.8d", (unsigned int)
+					 common->reg_log[i][common->reg_last] - common->reg_log[i][common->reg_last - 1]);
+		}
+
+		/* add line wrap */
+		len += scnprintf(buf + len, sizeof(buf) - len, "\n");
+
+		n = 0;
+		if (*ppos < len && count > 0) {
+			n = count;
+			pos = *ppos;
+
+			if (pos < 0)
+				return -EINVAL;
+
+			if (n > len - pos)
+				n = len - pos;
+
+			ret = copy_to_user(userbuf, buf + pos, n);
+			if (ret == n)
+				return -EFAULT;
+
+			n -= ret;
+			*ppos = pos + n;
+		}
+
+		spin_lock_bh(&common->reg_lock);
+
+		sum += n;
+		count -= n;
+		if (count <= 0)
+			break;
+
+		userbuf += n;
+		*ppos = 0;
+
+		if (++common->reg_last >= REG_LOG_ROWS - 1)
+			common->reg_last = 0;
+	}
+
+	spin_unlock_bh(&common->reg_lock);
+
+	return sum;
+}
+
+/* Register RegMons periodic readings via htimer */
+enum hrtimer_restart
+read_registers_regmon(struct hrtimer *hrtimer)
+{
+	struct hrtimer_mod  *hrtm = container_of(hrtimer,
+						 struct hrtimer_mod, timer);
+	struct ath_common *common = container_of(hrtm, struct ath_common, hrtm);
+	struct ath_hw *ah = container_of(common, struct ath_hw, common);
+	static struct timespec ts;
+
+	int i;
+
+	if (common->shutdown)
+		return HRTIMER_NORESTART;
+
+	/* get current kernel time per row */
+	getnstimeofday(&ts);
+	common->reg_hosttime[common->reg_current] = timespec_to_ns(&ts);
+
+	/* get upper 32-bit tsf timestamp from card */
+	common->reg_log[0][common->reg_current] =
+					REG_READ(ah, 0x8050);
+	/* get lower 32-bit tsf timestamp from card */
+	common->reg_log[1][common->reg_current] =
+					REG_READ(ah, 0x804c);
+
+	/* freeze all MIB registers */
+	REG_WRITE(ah, AR_MIBC, AR_MIBC_FMC);
+
+	/* read current MAC states from hardware registers
+	 * 0x80f8 -> MAC cycles (number of clock cycles at a given clock speed)
+	 *                      5GHz @20MHz -> tick freq. = 40MHz
+	 *                      5GHz @40MHz -> tick freq. = 80MHz
+	 *                      2.4GHz @20MHz -> tick freq. = 44MHz
+	 *                      2.4GHz @40MHz -> tick freq. = 88MHz
+	 * 0x80ec -> TX busy(number of cycles the transmitter unit is active)
+	 * 0x80f0 -> RX busy(number of cycles the receiver unit is active)
+	 * 0x80f4 -> MAC busy(sum of TX, RX and energy detection busy cycles) */
+	common->reg_log[2][common->reg_current] =
+			REG_READ(ah, 0x80f8); //MAC counter
+	common->reg_log[3][common->reg_current] =
+			REG_READ(ah, 0x80ec); //TX busy
+	common->reg_log[4][common->reg_current] =
+			REG_READ(ah, 0x80f0); //RX busy
+	common->reg_log[5][common->reg_current] =
+			REG_READ(ah, 0x80f4); //ED busy
+
+	/* un-freeze MIB registers */
+	REG_WRITE(ah, AR_MIBC, 0);
+
+	/* read lower 32-bit tsf again to calc duration of MAC state readings */
+	common->reg_log[6][common->reg_current] =
+					REG_READ(ah, 0x804c);
+
+	/* if set, than read additional register values [7...MAX_REG_COUNT] */
+	for (i = 7; i < MAX_REG_COUNT; i++) {
+		if (common->reg[7] != 0)
+			common->reg_log[i][common->reg_current] =
+				REG_READ(ah, common->reg[i]);
+		else
+			common->reg_log[i][common->reg_current] = 0;
+	}
+
+	/* handle ring buffer writings */
+	spin_lock(&common->reg_lock);
+	if (++common->reg_current > REG_LOG_ROWS - 1)
+		common->reg_current = 0;
+	if ((common->reg_last == common->reg_current) &&
+	    (++common->reg_last > REG_LOG_ROWS - 1))
+		common->reg_last = 0;
+	spin_unlock(&common->reg_lock);
+
+	/* set sampling interval if changed */
+	if (common->reg_interval > 0)
+		hrtimer_forward(hrtimer, ktime_get(), ns_to_ktime(common->reg_interval));
+	else
+		hrtimer_forward(hrtimer, ktime_get(), ns_to_ktime(10000000));
+
+	return HRTIMER_RESTART;
+}
+
--- /dev/null
+++ b/drivers/net/wireless/ath/ath9k/ath9k_regmon.h
@@ -0,0 +1,8 @@
+#include "../ath.h"
+#include "hw.h"
+
+
+ssize_t reg_log_read_regmon(struct ath_common *common, char __user *userbuf,
+				   size_t count, loff_t *ppos);
+enum hrtimer_restart read_registers_regmon(struct hrtimer *hrtimer);
+
--- a/drivers/net/wireless/ath/ath9k/init.c
+++ b/drivers/net/wireless/ath/ath9k/init.c
@@ -24,6 +24,7 @@
 #include <net/ieee80211_radiotap.h>
 
 #include "ath9k.h"
+#include "ath9k_regmon.h"
 
 struct ath9k_eeprom_ctx {
 	struct completion complete;
@@ -916,6 +917,23 @@ static void ath_get_initial_entropy(stru
 	add_device_randomness(buf, sizeof(buf));
 }
 
+ssize_t
+reg_log_read(struct file *file, char __user *userbuf, size_t count, loff_t *ppos)
+{
+	struct ath_softc *sc = file->private_data;
+	struct ath_common *common = &sc->sc_ah->common;
+
+	return reg_log_read_regmon(common, userbuf, count, ppos);
+}
+
+/* RegMon file handles */
+ static const struct file_operations reg_log_ops = {
+	.read = reg_log_read,
+	.open = simple_open,
+	.owner = THIS_MODULE,
+	.llseek = default_llseek,
+}
+;
 int ath9k_init_device(u16 devid, struct ath_softc *sc,
 		    const struct ath_bus_ops *bus_ops)
 {
@@ -924,6 +942,12 @@ int ath9k_init_device(u16 devid, struct
 	struct ath_hw *ah;
 	int error = 0;
 	struct ath_regulatory *reg;
+#ifdef CPTCFG_ATH9K_DEBUGFS
+	/* RegMon varaibles */
+	int i;
+	char *name;
+	char text[32];
+#endif
 
 	/* Bring up device */
 	error = ath9k_init_softc(devid, sc, bus_ops);
@@ -974,6 +998,45 @@ int ath9k_init_device(u16 devid, struct
 		goto unregister;
 	}
 
+#ifdef CPTCFG_ATH9K_DEBUGFS
+	/* RegMon debugfs entries */
+	common->reg_hosttime = kmalloc(REG_LOG_ROWS * sizeof(s64), GFP_KERNEL);
+
+	for (i = 0; i < MAX_REG_COUNT; i++)
+		common->reg_log[i] = kmalloc(REG_LOG_ROWS * sizeof(u32), GFP_KERNEL);
+
+	common->reg_lock = __SPIN_LOCK_UNLOCKED(regmon);
+	common->reg_hz = HZ;
+
+	common->debugfs_dir = debugfs_create_dir("regmon", sc->hw->wiphy->debugfsdir);
+	if (common->debugfs_dir) {
+		debugfs_create_u32("sampling_interval", S_IWUSR | S_IRUSR,
+				   common->debugfs_dir, &common->reg_interval);
+		debugfs_create_u32("kernel_hz", S_IRUSR, common->debugfs_dir,
+				   &common->reg_hz);
+		debugfs_create_file("register_log", S_IRUSR, common->debugfs_dir,
+				    sc, &reg_log_ops);
+
+		/* debugfs hocks to specify register adresses from user space */
+		for (i = 7; i < MAX_REG_COUNT; i++) {
+			sprintf(text, "register_%d", i);
+			name = text;
+			debugfs_create_x32(name, S_IWUSR | S_IRUSR,
+					   common->debugfs_dir, &common->reg[i]);
+		}
+		printk(KERN_ERR "ath9k debug: RegMon debugsfs created.\n");
+
+		/* init hrtimers with default interval of 10.000.000 nsec */
+		common->reg_interval = 10000000;
+		hrtimer_init(&common->hrtm.timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
+		common->hrtm.timer.function = read_registers_regmon;
+		printk(KERN_ERR "ath9k debug: RegMon hrtimer initialized.\n");
+	} else {
+		printk(KERN_ERR "ath9k debug: Unable to create RegMons debugfs files\n");
+		goto unregister;
+	}
+#endif
+
 	/* Handle world regulatory */
 	if (!ath_is_world_regd(reg)) {
 		error = regulatory_hint(hw->wiphy, reg->alpha2);
--- a/drivers/net/wireless/ath/ath9k/main.c
+++ b/drivers/net/wireless/ath/ath9k/main.c
@@ -17,6 +17,7 @@
 #include <linux/nl80211.h>
 #include <linux/delay.h>
 #include "ath9k.h"
+#include "ath9k_regmon.h"
 #include "btcoex.h"
 
 u8 ath9k_parse_mpdudensity(u8 mpdudensity)
@@ -98,9 +99,18 @@ void ath_ps_full_sleep(unsigned long dat
 	struct ath_softc *sc = (struct ath_softc *) data;
 	struct ath_common *common = ath9k_hw_common(sc->sc_ah);
 	bool reset;
+#ifdef CPTCFG_ATH9K_DEBUGFS
+	int res;
+#endif
 
 	spin_lock(&common->cc_lock);
 	ath_hw_cycle_counters_update(common);
+#ifdef CPTCFG_ATH9K_DEBUGFS
+	/* RegMon cancel in case of full sleep */
+	common->shutdown = 1;
+	res = hrtimer_try_to_cancel(&common->hrtm.timer);
+	printk(KERN_ERR "ath9k debug: regmon canceled hrtimer in ath_ps_full_sleep \n");
+#endif
 	spin_unlock(&common->cc_lock);
 
 	ath9k_hw_setrxabort(sc->sc_ah, 1);
@@ -145,6 +155,9 @@ void ath9k_ps_restore(struct ath_softc *
 	struct ath_common *common = ath9k_hw_common(sc->sc_ah);
 	enum ath9k_power_mode mode;
 	unsigned long flags;
+#ifdef CPTCFG_ATH9K_DEBUGFS
+	int res, i;
+#endif
 
 	spin_lock_irqsave(&sc->sc_pm_lock, flags);
 	if (--sc->ps_usecount != 0)
@@ -169,6 +182,21 @@ void ath9k_ps_restore(struct ath_softc *
 	}
 
 	spin_lock(&common->cc_lock);
+#ifdef CPTCFG_ATH9K_DEBUGFS
+	/* RegMon de-init */
+	common->shutdown = 1;
+	res = hrtimer_cancel(&common->hrtm.timer);
+	printk(KERN_ERR "ath9k debug: regmon stopped hrtimer\n");
+
+	debugfs_remove_recursive(common->debugfs_dir);
+
+	kfree(common->reg_hosttime);
+
+	for (i = 0; i < MAX_REG_COUNT; i++) {
+		kfree(common->reg_log[i]);
+	}
+#endif
+
 	ath_hw_cycle_counters_update(common);
 	spin_unlock(&common->cc_lock);
 
@@ -274,6 +302,16 @@ static bool ath_complete_reset(struct at
 	ieee80211_wake_queues(sc->hw);
 	ath9k_p2p_ps_timer(sc);
 
+#ifdef CPTCFG_ATH9K_DEBUGFS
+	/* RegMon start hrtimer based register readings */
+	/* a certain delay seems to be needed for proper start */
+	usleep_range(10000000,20000000);
+	hrtimer_start(&common->hrtm.timer,
+		      ktime_set(0, common->reg_interval),
+		      HRTIMER_MODE_REL);
+	printk(KERN_ERR "ath9k debug: RegMon hrtimer started successfuly.\n");
+#endif
+
 	return true;
 }
 
